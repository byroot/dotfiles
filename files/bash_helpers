git-current-branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

_MATE_BIN=/Applications/TextMate.app/Contents/MacOS/mate #$(which mate)

mate(){
  path=$(echo $1 | cut -d":" -f1)
  line=$(echo $1 | cut -d":" -f2)
  echo mate $path
  if [[ -z "$line" ]] ; then
    if [[ -d $path ]] ; then
      shopt -s extglob  # Enable extended globbing
      # /Applications/TextMate.app/Contents/Resources/mate !(@(cache|log|tmp)) $path
      shopt -u extglob  # Disable extended globbing
    else
      $_MATE_BIN $path 2> /dev/null
    fi
  else
    $_MATE_BIN $path -l $line 2> /dev/null
  fi
}

git-squash() {
  # Go back to the last commit that we want to form the initial commit (detach HEAD)
  branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
  tag="tmp-$RANDOM"

  git checkout HEAD

  # reset the branch pointer to the initial commit,
  # but leaving the index and working tree intact.
  git reset --soft HEAD~1

  # amend the initial tree using the tree from 'B'
  git commit --amend

  # temporarily tag this new initial commit
  # (or you could remember the new commit sha1 manually)
  git tag $tag

  # go back to the original branch
  git checkout $branch

  # Replay all the commits after B onto the new initial commit
  git rebase --onto $tag HEAD

  # remove the temporary tag
  git tag -d $tag
}
